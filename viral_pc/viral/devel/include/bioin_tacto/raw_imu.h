// Generated by gencpp from file bioin_tacto/raw_imu.msg
// DO NOT EDIT!


#ifndef BIOIN_TACTO_MESSAGE_RAW_IMU_H
#define BIOIN_TACTO_MESSAGE_RAW_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bioin_tacto
{
template <class ContainerAllocator>
struct raw_imu_
{
  typedef raw_imu_<ContainerAllocator> Type;

  raw_imu_()
    : header()
    , sensor_id(0)
    , tempe(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , gx(0.0)
    , gy(0.0)
    , gz(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)  {
    }
  raw_imu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_id(0)
    , tempe(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , gx(0.0)
    , gy(0.0)
    , gz(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef float _tempe_type;
  _tempe_type tempe;

   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;

   typedef float _gx_type;
  _gx_type gx;

   typedef float _gy_type;
  _gy_type gy;

   typedef float _gz_type;
  _gz_type gz;

   typedef float _mx_type;
  _mx_type mx;

   typedef float _my_type;
  _my_type my;

   typedef float _mz_type;
  _mz_type mz;





  typedef boost::shared_ptr< ::bioin_tacto::raw_imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bioin_tacto::raw_imu_<ContainerAllocator> const> ConstPtr;

}; // struct raw_imu_

typedef ::bioin_tacto::raw_imu_<std::allocator<void> > raw_imu;

typedef boost::shared_ptr< ::bioin_tacto::raw_imu > raw_imuPtr;
typedef boost::shared_ptr< ::bioin_tacto::raw_imu const> raw_imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bioin_tacto::raw_imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bioin_tacto::raw_imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bioin_tacto::raw_imu_<ContainerAllocator1> & lhs, const ::bioin_tacto::raw_imu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.tempe == rhs.tempe &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az &&
    lhs.gx == rhs.gx &&
    lhs.gy == rhs.gy &&
    lhs.gz == rhs.gz &&
    lhs.mx == rhs.mx &&
    lhs.my == rhs.my &&
    lhs.mz == rhs.mz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bioin_tacto::raw_imu_<ContainerAllocator1> & lhs, const ::bioin_tacto::raw_imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bioin_tacto

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bioin_tacto::raw_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bioin_tacto::raw_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bioin_tacto::raw_imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bioin_tacto::raw_imu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioin_tacto::raw_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioin_tacto::raw_imu_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bioin_tacto::raw_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51eb1d8b736b5695bb58dc3c4b5e4c55";
  }

  static const char* value(const ::bioin_tacto::raw_imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51eb1d8b736b5695ULL;
  static const uint64_t static_value2 = 0xbb58dc3c4b5e4c55ULL;
};

template<class ContainerAllocator>
struct DataType< ::bioin_tacto::raw_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bioin_tacto/raw_imu";
  }

  static const char* value(const ::bioin_tacto::raw_imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bioin_tacto::raw_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16 sensor_id\n"
"float32 tempe\n"
"float32 ax\n"
"float32 ay\n"
"float32 az\n"
"float32 gx\n"
"float32 gy\n"
"float32 gz\n"
"float32 mx\n"
"float32 my\n"
"float32 mz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bioin_tacto::raw_imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bioin_tacto::raw_imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_id);
      stream.next(m.tempe);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.gz);
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.mz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct raw_imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bioin_tacto::raw_imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bioin_tacto::raw_imu_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "tempe: ";
    Printer<float>::stream(s, indent + "  ", v.tempe);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "gx: ";
    Printer<float>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<float>::stream(s, indent + "  ", v.gy);
    s << indent << "gz: ";
    Printer<float>::stream(s, indent + "  ", v.gz);
    s << indent << "mx: ";
    Printer<float>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<float>::stream(s, indent + "  ", v.my);
    s << indent << "mz: ";
    Printer<float>::stream(s, indent + "  ", v.mz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIOIN_TACTO_MESSAGE_RAW_IMU_H
