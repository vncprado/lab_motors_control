// Generated by gencpp from file bioin_tacto/raw_imu_serial.msg
// DO NOT EDIT!


#ifndef BIOIN_TACTO_MESSAGE_RAW_IMU_SERIAL_H
#define BIOIN_TACTO_MESSAGE_RAW_IMU_SERIAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bioin_tacto/raw_imu.h>

namespace bioin_tacto
{
template <class ContainerAllocator>
struct raw_imu_serial_
{
  typedef raw_imu_serial_<ContainerAllocator> Type;

  raw_imu_serial_()
    : imus()  {
    }
  raw_imu_serial_(const ContainerAllocator& _alloc)
    : imus(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::bioin_tacto::raw_imu_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::bioin_tacto::raw_imu_<ContainerAllocator> >> _imus_type;
  _imus_type imus;





  typedef boost::shared_ptr< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> const> ConstPtr;

}; // struct raw_imu_serial_

typedef ::bioin_tacto::raw_imu_serial_<std::allocator<void> > raw_imu_serial;

typedef boost::shared_ptr< ::bioin_tacto::raw_imu_serial > raw_imu_serialPtr;
typedef boost::shared_ptr< ::bioin_tacto::raw_imu_serial const> raw_imu_serialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bioin_tacto::raw_imu_serial_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bioin_tacto::raw_imu_serial_<ContainerAllocator1> & lhs, const ::bioin_tacto::raw_imu_serial_<ContainerAllocator2> & rhs)
{
  return lhs.imus == rhs.imus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bioin_tacto::raw_imu_serial_<ContainerAllocator1> & lhs, const ::bioin_tacto::raw_imu_serial_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bioin_tacto

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf6b782ad59ebe5fad0f029c0e04fc49";
  }

  static const char* value(const ::bioin_tacto::raw_imu_serial_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf6b782ad59ebe5fULL;
  static const uint64_t static_value2 = 0xad0f029c0e04fc49ULL;
};

template<class ContainerAllocator>
struct DataType< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bioin_tacto/raw_imu_serial";
  }

  static const char* value(const ::bioin_tacto::raw_imu_serial_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bioin_tacto/raw_imu[] imus\n"
"\n"
"================================================================================\n"
"MSG: bioin_tacto/raw_imu\n"
"Header header\n"
"int16 sensor_id\n"
"float32 tempe\n"
"float32 ax\n"
"float32 ay\n"
"float32 az\n"
"float32 gx\n"
"float32 gy\n"
"float32 gz\n"
"float32 mx\n"
"float32 my\n"
"float32 mz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bioin_tacto::raw_imu_serial_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct raw_imu_serial_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bioin_tacto::raw_imu_serial_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bioin_tacto::raw_imu_serial_<ContainerAllocator>& v)
  {
    s << indent << "imus[]" << std::endl;
    for (size_t i = 0; i < v.imus.size(); ++i)
    {
      s << indent << "  imus[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::bioin_tacto::raw_imu_<ContainerAllocator> >::stream(s, indent + "    ", v.imus[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIOIN_TACTO_MESSAGE_RAW_IMU_SERIAL_H
